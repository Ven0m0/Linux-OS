# Professional Bash Script Development Guide

## Core Requirements
- Bash version 4.0 or higher
- POSIX-compliant implementation
- ShellCheck compliance (0 warnings/errors)
- Cross-distribution compatibility (RHEL/Debian-based)

## Implementation Standards

### Template Structure
```bash
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Script metadata
readonly VERSION="1.0.0"
readonly SCRIPT_NAME="${0##*/}"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly WORKDIR="/tmp/${SCRIPT_NAME}.$$"

# Error handling and cleanup
trap 'cleanup' EXIT INT TERM
cleanup() { [[ -d "${WORKDIR}" ]] && rm -rf "${WORKDIR}"; }
die() { printf '[ERROR] %s\n' "$*" >&2; exit 1; }
log() { printf '[%s] %s\n' "$(date -Iseconds)" "$*"; }

# Dependency validation
declare -ra REQUIRED_TOOLS=([0]="curl" [1]="git" [2]="rsync")
for tool in "${REQUIRED_TOOLS[@]}"; do
    command -v "$tool" >/dev/null 2>&1 || die "${tool} is required but not installed"
done
```

### Performance Guidelines
1. Use bash built-ins over external commands
2. Implement parameter expansion instead of sed/awk/cut
3. Use process substitution to preserve variable scope
4. Optimize loop operations and file processing
5. Minimize subshell creation
6. Utilize arithmetic operations instead of expr/bc

### Required Components
1. Comprehensive error trapping
2. Structured logging with timestamps
3. Input validation and sanitization
4. Privilege escalation handling
5. Cleanup operations
6. Help documentation (-h/--help)
7. Version information (-v/--version)
8. Debug mode (-d/--debug)

### Security Measures
1. Validate all user inputs
2. Secure temporary file handling
3. Proper permission management
4. Safe path handling
5. Protected environment variables

## Documentation Requirements
1. Script purpose and functionality
2. Usage examples with common cases
3. Command-line options
4. Environment variables
5. Return codes and error states
6. Dependencies and version requirements

## Testing Requirements
1. Unit tests for core functions
2. Integration tests for system interaction
3. Error case validation
4. Cross-distribution testing
5. Performance benchmarks

## Quality Control
1. ShellCheck validation
2. shfmt code formatting
3. Performance profiling
4. Security audit
5. Documentation review

## References
- GNU Bash Manual
- Google Shell Style Guide
- ShellCheck Documentation
- POSIX Shell Standards

Note: Implementation must follow all security best practices and maintain compatibility across major Linux distributions.
