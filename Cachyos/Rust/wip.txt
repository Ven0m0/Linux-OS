# https://github.com/raphamorim/rio/blob/main/Cargo.toml
[profile.release]
strip = "symbols"           # See split-debuginfo - allows us to drop the size by ~65%
split-debuginfo = "packed"  # generates a separate *.dwp/*.dSYM so the binary can get stripped
debug = false
codegen-units = 1
incremental = false
lto = "fat"
panic = "abort"             # reduces binary size by ~50% in combination with -Zbuild-std-features=panic_immediate_abort
opt-level = "3"
debug-assertions = false
overflow-checks = false

RUSTFLAGS="-Copt-level=3 -Ctarget-cpu=native -Ccodegen-units=1 -Clto=fat -Cembed-bitcode=y -Crelro-level=off -Cdebuginfo=0 -Cforce-frame-pointers=no -Clink-dead-code=no -Zunstable-options -Ztune-cpu=native -Zprecise-enum-drop-elaboration=y -Zfunction-sections -Cllvm-args=-enable-dfa-jump-thread -Zbuild-std=std,panic_abort-Zbuild-std-features=panic_immediate_abort,force_alloc_jemalloc,threads -Zpanic-abort-tests -Zmerge-functions=aliases -Zvirtual-function-elimination -Zfmt-debug=none -Zlocation-detail=none -Clink-arg=-fuse-ld=lld"
unset CARGO_ENCODED_RUSTFLAGS
export OPT_LEVEL=3
export CPP="clang-cpp"
export AR="llvm-ar" NM="llvm-nm" RANLIB="llvm-ranlib"
export STRIP="llvm-strip"
export CC="clang" CXX="clang++"
export CARGO_INCREMENTAL=0
export RUSTC_BOOTSTRAP=1 RUSTUP_TOOLCHAIN=nightly
export CARGO_BUILD_JOBS="$jobs"

-Cllvm-args=-enable-dfa-jump-thread
-Cllvm-args="-loop-vectorize -slp-vectorize"


--lto-emit-llvm
-Zbuild-std=std,panic_abort
-Zbuild-std-features=panic_immediate_abort
# -Z build-std-features=panic_immediate_abort,force_alloc_jemalloc,threads
-Z panic-abort-tests

-Z unstable-options -Z fewer-names -Z combine-cgu
-Zmerge-functions=aliases
-Z relax-elf-relocations
-Zvirtual-function-elimination
RUSTFLAGS="-C passes=mem2reg,simplifycfg,instcombine,gvn,loop-unroll,licm"

PGO 2nd compilation:
-C profile-correction
-Cllvm-args=-pgo-warn-missing-function -Cprofile-use

CARGO_PROFILE_RELEASE_LTO

# Testing required:
-Z tls-model=local-exec
# -Z tls-model=initial-exec # smaller apps
-C link-arg=--enable-new-dtags
-C link-arg=--compact-branches -C link-arg=--icf=all 
-C link-arg=-plugin-opt=--fat-lto-objects -C link-arg=-plugin-opt=--lto-aa-pipeline -C link-arg=-Wl,-plugin-opt=--lto-newpm-passes

-C link-arg=-Wl,--ignore-data-address-equality
-C link-arg=-Wl,--ignore-function-address-equality
LDFLAGS=(
-Wl,--ignore-data-address-equality
-Wl,--ignore-function-address-equality
)
mold doesnt have: --ignore-function-address-equality



# Profile accuracy
profileon () {
    echo "Performance profiling on"
    sudo bash -c "echo 0 > /proc/sys/kernel/randomize_va_space" || (sudo sysctl -w kernel.randomize_va_space=0)
    sudo bash -c "echo 0 > /proc/sys/kernel/nmi_watchdog" || (sudo sysctl -w kernel.nmi_watchdog=0)
    sudo bash -c "echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo"
    sudo cpupower frequency-set --governor performance
}

profileoff () {
    echo "Performance profiling off"
    sudo bash -c "echo 1 > /proc/sys/kernel/randomize_va_space"
    sudo bash -c "echo 0 > /sys/devices/system/cpu/intel_pstate/no_turbo"
}



# Git
https://github.com/milobanks/greatness
https://github.com/SuperCuber/dotter
https://github.com/oknozor/toml-bombadil
https://github.com/volllly/rotz
https://github.com/plamorg/ambit
https://crates.io/crates/ldfm
https://crates.io/crates/dfm
https://github.com/Addvilz/dots
https://github.com/comtrya/comtrya
https://github.com/RaphGL/Tuckr
https://github.com/elkowar/yolk
https://github.com/644/compressimages
https://github.com/jkool702/forkrun
https://crates.io/crates/trees-rs
fisher install meaningful-ooo/sponge
fisher install acomagu/fish-async-prompt

shopt -u checkhash

CCACHE_COMPRESS=true
CCACHE_COMPRESSLEVEL=3
CCACHE_INODECACHE=true



RUSTFLAGS="-C link-args=-Wl,--emit-relocs" cargo build --release
echo "Build a BOLT instrumented binary using the PGO profiles..."
cargo pgo bolt build --with-pgo
echo "Runing the binary to gather BOLT profiles..."
./target/.../<binary>-bolt-instrumented
echo "Optimizing binary with BOLT (and PGO) using the gathered profiles..."
cargo pgo bolt optimize --with-pgo

cargo pgo test || cargo pgo bench

# https://kobzol.github.io/rust/cargo/2023/07/28/rust-cargo-pgo.html
# trick to get 1 file for EACH perf record to prevent overrides
LLVM_PROFILE_FILE=./target/pgo-profiles/%m_%p.profraw
  ./target/release/x86_64-unknown-linux-gnu/foo

PGO:
-C passes=block-placement

After bolt:
-C passes=strip,adce

-C profile-correction
-Cllvm-args=-pgo-warn-missing-function -Cprofile-use

cargo clean
cargo-cache -efg >/dev/null 2>&1
cargo update --recursive
cargo-upgrade upgrade --recursive true --pinned allow
cargo-fmt --all
cargo clippy --fix
cargo-sort -w --order package,dependencies,features
cargo-udeps udeps --workspace --release --all-features --target x86_64-unknown-linux-gnu --keep-going
cargo-udeps udeps --bins --lib --release
cargo-machete --fix
cargo-machete --fix --with-metadata
cargo-minify --workspace --allow-dirty --allow-staged --allow-no-vcs
cargo-minify --workspace --allow-dirty --allow-staged --allow-no-vcs --apply
cargo fix --workspace --edition-idioms --allow-dirty --allow-staged --allow-no-vcs --bins --lib -r



---------------------------------------
Snippet:

cargo-fast-install() {
  RUSTUP_TOOLCHAIN=nightly \
  RUSTC_BOOTSTRAP=1 \
  RUSTFLAGS="-Z build-std=std,panic_abort -C target-cpu=native -C prefer-inline -Clto=thin -Ccodegen-units=1" \
  cargo install "$@"
}
cargo-fast-install sd fd skim

echo "ðŸš€ Installing $CRATE with optimized flags..."

---------------------------------------

cargo +nightly build --bins --lib -r --ignore-rust-version --keep-going -Z unstable-options -Zno-embed-metadata


-Z tls-model=local-exec
# -Z tls-model=initial-exec # smaller apps
-Z relax-elf-relocations
-Z virtual-function-elimination


# Bolt:
LD_PRELOAD=/usr/lib/libmimalloc.so
--lto-emit-llvm
-Z build-std=std,panic_abort
-Z build-std-features=panic_immediate_abort
-Z panic-abort-tests

llvm-bolt <executable> -o <executable>.bolt -data=perf.fdata BOLT_OPTIONS

bolt -icf=1 vs -icf=all and -reorder-functions=hfsort vs -reorder-functions=hfsort+
-mllvm -pgo-temporal-instrumentation 
-mllvm-pgo-cold-func-opt=minsize 
-Wl,-mllvm,-enable-ext-tsp-block-placement=1

# CFLAG error prevention
-Wno-profile-instr-unprofiled -Wno-profile-instr-out-of-date -Wno-backend-plugin



# https://github.com/llvm/llvm-project/blob/main/bolt/README.md
# For apps
perf record -e cycles:u -j any,u -o perf.data -- <executable> <args> ...
# For services
$ perf record -e cycles:u -j any,u -a -o perf.data -- sleep 180

# Branch filtering via "-b"
perf record -b 

# better clang pgo sampling: 
-fsample-profile-use-profi
# better DWARF for sampling
-fdebug-info-for-profiling -funique-internal-linkage-names
# other clang pgo tweaks
-fbasic-block-sections=all

-fprofile-instr-generate

# sampling profiles generated by external profilers:
-fprofile-sample-use / -fauto-profile

# https://android-developers.googleblog.com/2023/12/faster-rust-toolchains-for-android.html
# BOLT options:
--peepholes=all
--data=<path-to-profile>
--reorder-blocks=ext-tsp
â€“-reorder-functions=hfsort+
--split-functions
--split-all-cold
--split-eh
--dyno-stat
-icf=all
-use-gnu-stack

Extra clang pgo:
-mllvm -pgo-temporal-instrumentation -Wl,-mllvm,-enable-ext-tsp-block-placement=1


